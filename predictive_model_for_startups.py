# -*- coding: utf-8 -*-
"""Predictive model for startups

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jrNhiq8Fu1wscFE4sk6X-ZGgWdweteoE

### Problem Statement

Implement multiple linear regression to create a predictive model capable of predicting the profits earned by startup companies. The dataset contains data about 50 startups and the amount of money they spend on research and development, administration and marketing. Also, find out if there is multicollinearity in the dataset.

---

### List of Activities
 
**Activity 1:** Analysing the Dataset
 
**Activity 2:** Data Manipulation
 
**Activity 3:** Train-Test Split
 
**Activity 4:** Model Training and Prediction using `sklearn`
 
**Activity 5:** Model Training using `statsmodels.api`

---

#### Activity 1:  Analysing the Dataset
 
- Create a Pandas DataFrame for **Startups** dataset using the below link. This dataset contains profits earned by 50 startups and their several expenditure values.
 
 
 
   **Dataset Link:** https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/50_Startups.csv
 
- Print the first five rows of the dataset. Check for null values and treat them accordingly.
"""

# Import modules
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df=pd.read_csv('https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/50_Startups.csv')

# Print first five rows using head() function
df.head(5)

# Check if there are any null values. If any column has null values, treat them accordingly
df.isna().sum()

"""---

#### Activity 2: Data Manipulation

The dataset contains a column `State` that is categorical. However for linear regression, we need all numerical variables. So to convert the categorical data to a numerical data, 
- Use `unique()` function to get the unique categories of the `State` column.
- Replace the unique categories with intergers starting from `0`, `1`, `2`,...
"""

# Display the number of occurrences of each label in the 'State' column.
df['State'].value_counts()

# Create a list of unique categories using 'unique()' function and print them
unique_states=list(df['State'].unique())
print(unique_states)

# Replace the unique non-numeric categories in 'State' column with numeric values 
df.loc[df['State']==unique_states[0],'State']=0
df.loc[df['State']==unique_states[1],'State']=1
df.loc[df['State']==unique_states[2],'State']=2

# Display the number of occurrences of each label in the 'State' column again.
print(df['State'].value_counts())

# Print the datatype of the column
df['State'].dtype

# Convert the column into integer DataFrame.
df['State'] = df['State'].astype('int')

# Print the information of the DataFrame to verify the column's datatype
df.info()

"""---

#### Activity 3: Train-Test Split
 
We need to predict the value of `Profit` variable, using other variables. Thus, `Profit` is the target or dependent variable and other columns except `Profit` are the features or the independent variables.
 
Split the dataset into training set and test set such that the training set contains 70% of the instances and the remaining instances will become the test set.
"""

# Split the DataFrame into the training and test sets.

from sklearn.model_selection import train_test_split

X=df.drop('Profit',axis=1)
y = df['Profit']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)

"""---

#### Activity 4: Model Training and Prediction using `sklearn`

Implement multiple linear regression using `sklearn` module by creating an object of the `LinearRegression` class and calling the `fit()` function.

**Note:** Reshaping the target variable array into a 2D array is not mandatory in multiple linear regression. You can skip that.
"""

# Build linear regression model using sklearn module
from sklearn.linear_model import LinearRegression

# Print the value of the intercept 

sklearn_lin_reg = LinearRegression()
sklearn_lin_reg.fit(X_train, y_train)

print("\nConstant".ljust(15, " "), f"{sklearn_lin_reg.intercept_:.6f}") 

# Print the names of the features along with the values of their corresponding coefficients.
for item in list(zip(X.columns.values, sklearn_lin_reg.coef_)):
  print(f"{item[0]}".ljust(15, " "), f"{item[1]:.6f}")

"""Predict the values for the test set by calling the `predict()` function on the LinearRegression object. """

# Predict the target variable values for test set

y_test_pred = sklearn_lin_reg.predict(X_test)
y_test_pred

"""---

#### Activity 5: Model Training using `statsmodels.api`

Perform the following tasks:
- Implement multiple linear regression using `statsmodels.api` module and find the values of all the regression coefficients using this module.
-Print the statistical summary of the regression model.
- If the summary indicates the presence of multicollinearity, create a heatmap of a correlation DataFrame to identify which independent variables are highly correlated with each other.
"""

# Build a linear regression model using the 'statsmodels.api' module.
import statsmodels.api as sm

# Add a constant to feature variables

X=df.drop('Profit',axis=1)
y = df['Profit']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)

X_train_sm = sm.add_constant(X_train)
# Fit the regression line using 'OLS'
lr = sm.OLS(y_train, X_train_sm).fit()
# Print the parameters, i.e. the intercept and the slope of the regression line fitted
lr.params

# Print statistical summary of the model
print(lr.summary())

"""**Q:** What is the $R^2$ (R-squared) value for this model?

**A:**  0.951

**Q:** Does the summary table indicates the presence of multicollinearity?

**A:** Yes
"""

# If there is multicollinearity, create a heatmap of a correlation DataFrame of the Startup dataset.
# If no, skip this part

plt.figure(figsize=[15,5])
sns.heatmap(df.corr(),annot=True)
plt.show()

"""**Q:** Which independent variables are strongly correlated with each other?

**A:** R&D spend and Marketing Spend 
"""